Option Explicit

' Main macro that reads inputs from quotation_inputs.xlsm and creates Generated Quotation.xlsx
Sub GenerateQuotation()
    Dim inputsPath As String
    Dim inputsWB As Workbook, masterWB As Workbook
    Dim genSheet As Worksheet, secSheet As Worksheet
    Dim placeholders As Object, tableEntries As Object, fSections As Object
    Dim lastRow As Long, i As Long
    Dim key As String, rowData As Variant
    Dim sectionKey As String, dotPos As Long
    Dim masterWS As Worksheet

    ' ============================
    ' 1. Initialize dictionaries
    ' ============================
    Set placeholders = CreateObject("Scripting.Dictionary")
    Set tableEntries = CreateObject("Scripting.Dictionary")
    Set fSections = CreateObject("Scripting.Dictionary")
    
    ' ============================
    ' 2. Open quotation_inputs.xlsm
    ' ============================
    inputsPath = ThisWorkbook.Path & "\quotation_inputs.xlsm"
    Set inputsWB = Workbooks.Open(inputsPath)
    
    ' -------------------------------
    ' Read General Inputs (Sheet: "General Inputs")
    ' -------------------------------
    Set genSheet = inputsWB.Sheets("General Inputs")
    ' Expecting labels in cells B3:B10 and values in C3:C10.
    For i = 3 To 10
         key = Trim(genSheet.Cells(i, "B").Value)
         key = Replace(key, ":", "")   ' Remove colon (e.g., "Ref:" becomes "Ref")
         If key <> "" Then
             placeholders(key) = genSheet.Cells(i, "C").Value
         End If
    Next i
    
    ' -------------------------------
    ' Read Section Inputs (Sheet: "Section Inputs")
    ' -------------------------------
    Set secSheet = inputsWB.Sheets("Section Inputs")
    ' Assuming data starts at row 2 and columns B through G contain:
    ' Key | Item Name | Description | Qty | Price | Remarks
    lastRow = secSheet.Cells(secSheet.Rows.Count, "B").End(xlUp).Row
    For i = 2 To lastRow
         key = Trim(secSheet.Cells(i, "B").Value)
         If key <> "" Then
             ' Read the row into an array (columns B to G)
             rowData = Array( _
                  key, _
                  secSheet.Cells(i, "C").Value, _
                  secSheet.Cells(i, "D").Value, _
                  secSheet.Cells(i, "E").Value, _
                  secSheet.Cells(i, "F").Value, _
                  secSheet.Cells(i, "G").Value _
             )
             
             ' If key starts with "F", group into fSections; otherwise, treat as table entry.
             If Left(key, 1) = "F" Then
                 ' Expecting keys like "F1.1", "F1.2", etc.â€”group by the part before the dot.
                 dotPos = InStr(key, ".")
                 If dotPos > 0 Then
                     sectionKey = Left(key, dotPos - 1)  ' e.g., "F1"
                 Else
                     sectionKey = key
                 End If
                 ' Initialize the array for this F section if needed.
                 If Not fSections.Exists(sectionKey) Then
                     fSections.Add sectionKey, Array()
                 End If
                 ' Append the current rowData to the appropriate F section group.
                 fSections(sectionKey) = AppendToArray(fSections(sectionKey), rowData)
             Else
                 ' For non-F keys (Sections A, B, C, D, E, X), add to tableEntries.
                 tableEntries.Add key, rowData
             End If
         End If
    Next i
    
    inputsWB.Close False  ' Close the inputs workbook
    
    ' ============================
    ' 3. Open master quotation template
    ' ============================
    Dim masterPath As String
    masterPath = ThisWorkbook.Path & "\dev(do not edit)\master_quotation_format.xlsx"
    Set masterWB = Workbooks.Open(masterPath)
    Set masterWS = masterWB.Sheets(1)  ' Assuming the target is the first sheet
    
    ' ============================
    ' 4. Update the master template
    ' ============================
    ' Update header placeholders (e.g., Ref, Date, etc.)
    Call UpdateHeader(masterWS, placeholders)
    
    ' Update table entries (Sections A, B, C, D, E, X)
    Call UpdateTableEntries(masterWS, tableEntries)
    
    ' Update Section F entries.
    ' For each F section group (like "F1", "F2", etc.), map to the proper section header.
    Dim fKey As Variant, sectionHeader As String
    For Each fKey In fSections.Keys
         Select Case fKey
             Case "F1": sectionHeader = "F1. Manpower"
             Case "F2": sectionHeader = "F2. Accommodation"
             Case "F3": sectionHeader = "F3. Air Ticket"
             Case "F4": sectionHeader = "F4. Local Transportation"
             Case "F5": sectionHeader = "F5. Miscellaneous, Tools"
             Case "F6": sectionHeader = "F6. Preshow Maintenance, Packing"
             Case Else: sectionHeader = fKey  ' Fallback if no mapping is defined
         End Select
         Call UpdateSection(masterWS, sectionHeader, fSections(fKey))
    Next fKey
    
    ' (Optional) Update overall sub total cost.
    Dim cell As Range
    For Each cell In masterWS.UsedRange
         If Not IsError(cell.Value) Then
              If VarType(cell.Value) = vbString Then
                  If InStr(cell.Value, "Sub Total Cost (USD):") > 0 Then
                      cell.Value = "Sub Total Cost (USD): $24,390"
                  End If
              End If
         End If
    Next cell
    
    ' ============================
    ' 5. Save and close the master workbook
    ' ============================
    masterWB.SaveAs ThisWorkbook.Path & "\Generated Quotation.xlsx"
    masterWB.Close False
    
    MsgBox "Generated Quotation.xlsx created successfully!", vbInformation, "Quotation Generation"
End Sub

' -----------------------------------------------------------
' Helper function: Appends a new element to an existing array.
' -----------------------------------------------------------
Function AppendToArray(oldArray As Variant, newValue As Variant) As Variant
    Dim newArray() As Variant
    Dim i As Long, n As Long

    On Error Resume Next
    n = UBound(oldArray)
    On Error GoTo 0

    ' If array is empty, create a single-element array.
    If n < 0 Then
        ReDim newArray(0 To 0)
        newArray(0) = newValue
    Else
        ReDim newArray(0 To n + 1)
        For i = 0 To n
            newArray(i) = oldArray(i)
        Next i
        newArray(n + 1) = newValue
    End If
    AppendToArray = newArray
End Function
